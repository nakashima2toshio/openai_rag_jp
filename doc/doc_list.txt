Memo

README.md を最新版に、かつ以下の資料を統合した資料にアップデートしたい。
  RAG構築（Cloud版、Local-Qdrant版）、検索が主眼とし、
  全体構成、記述内容まで、全体的に見直し、作成せよ。

  （1）以下のREADME資料の構成、リンク、1行概要を持つ。
  README_2.md
  README_preparation.md
  README_qdrant.md
  README_qdrant_setup.md

  （2）以下のグループ、個別の資料の構成、リンク、1行概要を持つ。

  [docker-compose]
  doc/docker-compose.md

  [setup]
  doc/server.md
  doc/setup.md

  [個別]
  doc/a01_load_set_rag_data.md
  doc/a02_set_vector_store_vsid.md
  doc/a10_show_qdrant_data.md
  doc/a20_rag_search_cloud_vs.md
  doc/a50_qdrant_registration.md
  doc/a50_rag_search_local_qdrant.md

  [common]
  doc/config_yml.md
  doc/helper_api.md
  doc/helper_rag.md
  doc/helper_st.md

ーーーーーーーーーーーーーーーーーーーーーー
  [docker-compose]
  docker-compose/docker-compose.yml

  [setup]
  server.py
  setup.py

  [工程]
  a01_load_set_rag_data.py
  a02_set_vector_store_vsid.py
  a10_show_qdrant_data.py
  a20_rag_search_cloud_vs.py
  a50_qdrant_registration.py
  a50_rag_search_local_qdrant.py

  [common]
  config_yml.yml
  helper_api.py
  helper_rag.py
  helper_st.py

------------------------------------
old_code/a00_dl_dataset_from_huggingface.py
old_code/a011_make_rag_data_customer.py
old_code/a013_make_rag_data_medical.py
old_code/a014_make_rag_data_sciq.py
old_code/a015_make_rag_data_legal.py

------------------------------------

 QdrantをローカルRAGサーチに使用するための全ての設定と実装が完了しました。

  実施内容：

  1. setup.py の改修
    - Qdrantサーバーの自動起動機能追加
    - 必要パッケージの確認（qdrant-client、yaml、datasets）
    - データ登録オプション追加
  2. server.py の改修
    - Qdrantサーバーの起動・接続確認機能追加
    - Streamlit UIの自動起動
    - 統合管理機能
  3. qdrant_data_loader.py の新規作成
    - 簡略版データ投入スクリプト
    - 複数ドメインのデータ処理
    - OpenAI埋め込み生成とバッチ処理
  4. README_qdrant.md の作成
    - セットアップガイド
    - 使用方法とトラブルシューティング

  使用方法：

  # 1. セットアップ実行
  python setup.py

  # 2. サーバー起動（Qdrant + UI）
  python server.py

  # 3. データ投入（別ターミナル）
  python qdrant_data_loader.py --recreate --limit 100

  # 4. ブラウザでアクセス
  # http://localhost:8504

  既存のa50_qdrant_registration.pyとa50_qdrant_search.pyもそのまま使用可能です。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


入力
datasets/customer_support_faq.csv
datasets/legal_qa.csv
datasets/medical_qa.csv
datasets/sciq_qa.csv

出力
OUTPUT/preprocessed_customer_support_faq.csv
OUTPUT/preprocessed_legal_qa.csv
OUTPUT/preprocessed_medical_qa.csv
OUTPUT/preprocessed_sciq_qa.csv


[RAGデータのダウンロード]HuggingFaceからテスト用データとしてCSVデータをダウンロードする。
a30_00_dl_dataset_from_huggingface.py
- 処理・概要(IPO)：

[RAGデータ作成]ダウンロードしたCSVファイルをRAG用のデータとして加工しTXTファイルを作成する。
a011_make_rag_data_customer.py
a013_make_rag_data_medical.py
a014_make_rag_data_sciq.py
a015_make_rag_data_legal.py

- 処理・概要(IPO)：

[vsid登録]RAG用のデータとして加工ずみのTXTファイルをOpenAIのvector storeに登録する。
a30_020_make_vsid.py
- 処理・概要(IPO)：

[vs検索]vector storeに登録されたデータを利用して検索を実施する。
a30_30_rag_search.py
- 処理・概要(IPO)：


（1）開発の準備
・requirements.txt から必要なソフトをインストールする。
python -m pip install -r requirements.txt

（2）HuggingFaceから、テスト用データとして、以下をダウンロードする。
[a30_00_dl_dataset_from_huggingface.py]
customer_support_faq.csv    ① カスタマーサポート・FAQデータセット
trivia_qa.csv               ② 一般知識・トリビアQAデータセット
medical_qa.csv              ③ 医療質問回答データセット
sciq_qa.csv                 ④ 科学・技術QAデータセット
legal_qa.csv                ⑤ 法律・判例QAデータセット

（3）それぞれのダウンロードしたCSVファイルをRAG用のデータとして加工し、TXTファイルを作成する。
[a011_make_rag_data_customer.py]
[a013_make_rag_data_medical.py]
[a014_make_rag_data_sciq.py]
[a015_make_rag_data_legal.py]

（4）RAG用のデータとして加工ずみのTXTファイルをOpenAIのvector storeに登録する。
[a30_020_make_vsid.py]

（5）vector store に登録されたデータを利用して、検索を実施する。
[a30_30_rag_search.py]

（6）ヘルパー関数
helper_api.py
helper_rag